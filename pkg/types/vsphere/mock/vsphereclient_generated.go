// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	object "github.com/vmware/govmomi/object"
	types "github.com/vmware/govmomi/vim25/types"
)

// MockNetworkIdentifier is a mock of NetworkIdentifier interface.
type MockNetworkIdentifier struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkIdentifierMockRecorder
}

// MockNetworkIdentifierMockRecorder is the mock recorder for MockNetworkIdentifier.
type MockNetworkIdentifierMockRecorder struct {
	mock *MockNetworkIdentifier
}

// NewMockNetworkIdentifier creates a new mock instance.
func NewMockNetworkIdentifier(ctrl *gomock.Controller) *MockNetworkIdentifier {
	mock := &MockNetworkIdentifier{ctrl: ctrl}
	mock.recorder = &MockNetworkIdentifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkIdentifier) EXPECT() *MockNetworkIdentifierMockRecorder {
	return m.recorder
}

// GetNetworkName mocks base method.
func (m *MockNetworkIdentifier) GetNetworkName(ref types.ManagedObjectReference) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkName", ref)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkName indicates an expected call of GetNetworkName.
func (mr *MockNetworkIdentifierMockRecorder) GetNetworkName(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkName", reflect.TypeOf((*MockNetworkIdentifier)(nil).GetNetworkName), ref)
}

// GetNetworks mocks base method.
func (m *MockNetworkIdentifier) GetNetworks(ccr *object.ClusterComputeResource) ([]types.ManagedObjectReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks", ccr)
	ret0, _ := ret[0].([]types.ManagedObjectReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks.
func (mr *MockNetworkIdentifierMockRecorder) GetNetworks(ccr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockNetworkIdentifier)(nil).GetNetworks), ccr)
}

// MockFinder is a mock of Finder interface.
type MockFinder struct {
	ctrl     *gomock.Controller
	recorder *MockFinderMockRecorder
}

// MockFinderMockRecorder is the mock recorder for MockFinder.
type MockFinderMockRecorder struct {
	mock *MockFinder
}

// NewMockFinder creates a new mock instance.
func NewMockFinder(ctrl *gomock.Controller) *MockFinder {
	mock := &MockFinder{ctrl: ctrl}
	mock.recorder = &MockFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinder) EXPECT() *MockFinderMockRecorder {
	return m.recorder
}

// ClusterComputeResource mocks base method.
func (m *MockFinder) ClusterComputeResource(ctx context.Context, path string) (*object.ClusterComputeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterComputeResource", ctx, path)
	ret0, _ := ret[0].(*object.ClusterComputeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterComputeResource indicates an expected call of ClusterComputeResource.
func (mr *MockFinderMockRecorder) ClusterComputeResource(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterComputeResource", reflect.TypeOf((*MockFinder)(nil).ClusterComputeResource), ctx, path)
}

// ClusterComputeResourceList mocks base method.
func (m *MockFinder) ClusterComputeResourceList(ctx context.Context, path string) ([]*object.ClusterComputeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterComputeResourceList", ctx, path)
	ret0, _ := ret[0].([]*object.ClusterComputeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterComputeResourceList indicates an expected call of ClusterComputeResourceList.
func (mr *MockFinderMockRecorder) ClusterComputeResourceList(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterComputeResourceList", reflect.TypeOf((*MockFinder)(nil).ClusterComputeResourceList), ctx, path)
}

// Datacenter mocks base method.
func (m *MockFinder) Datacenter(ctx context.Context, path string) (*object.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Datacenter", ctx, path)
	ret0, _ := ret[0].(*object.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Datacenter indicates an expected call of Datacenter.
func (mr *MockFinderMockRecorder) Datacenter(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datacenter", reflect.TypeOf((*MockFinder)(nil).Datacenter), ctx, path)
}

// DatacenterList mocks base method.
func (m *MockFinder) DatacenterList(ctx context.Context, path string) ([]*object.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacenterList", ctx, path)
	ret0, _ := ret[0].([]*object.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacenterList indicates an expected call of DatacenterList.
func (mr *MockFinderMockRecorder) DatacenterList(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacenterList", reflect.TypeOf((*MockFinder)(nil).DatacenterList), ctx, path)
}

// DatastoreList mocks base method.
func (m *MockFinder) DatastoreList(ctx context.Context, path string) ([]*object.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatastoreList", ctx, path)
	ret0, _ := ret[0].([]*object.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatastoreList indicates an expected call of DatastoreList.
func (mr *MockFinderMockRecorder) DatastoreList(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatastoreList", reflect.TypeOf((*MockFinder)(nil).DatastoreList), ctx, path)
}

// Folder mocks base method.
func (m *MockFinder) Folder(ctx context.Context, path string) (*object.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Folder", ctx, path)
	ret0, _ := ret[0].(*object.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Folder indicates an expected call of Folder.
func (mr *MockFinderMockRecorder) Folder(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Folder", reflect.TypeOf((*MockFinder)(nil).Folder), ctx, path)
}

// Network mocks base method.
func (m *MockFinder) Network(ctx context.Context, path string) (object.NetworkReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network", ctx, path)
	ret0, _ := ret[0].(object.NetworkReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Network indicates an expected call of Network.
func (mr *MockFinderMockRecorder) Network(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockFinder)(nil).Network), ctx, path)
}

// NetworkList mocks base method.
func (m *MockFinder) NetworkList(ctx context.Context, path string) ([]object.NetworkReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkList", ctx, path)
	ret0, _ := ret[0].([]object.NetworkReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkList indicates an expected call of NetworkList.
func (mr *MockFinderMockRecorder) NetworkList(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkList", reflect.TypeOf((*MockFinder)(nil).NetworkList), ctx, path)
}

// ResourcePool mocks base method.
func (m *MockFinder) ResourcePool(ctx context.Context, path string) (*object.ResourcePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePool", ctx, path)
	ret0, _ := ret[0].(*object.ResourcePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePool indicates an expected call of ResourcePool.
func (mr *MockFinderMockRecorder) ResourcePool(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePool", reflect.TypeOf((*MockFinder)(nil).ResourcePool), ctx, path)
}
